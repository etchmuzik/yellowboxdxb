{
  "meta": {
    "instanceId": "2b4ab318d4f8eba10155f5eb0f51c5f5d883c3a9b9a506cad7c0e0c2f2c8874e"
  },
  "name": "Yellow Box - Comprehensive Monitoring System",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 5
            }
          ]
        }
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Monitoring Schedule",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "monitoring-webhook",
        "responseMode": "responseNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Monitoring Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [240, 600],
      "webhookId": "yellowbox-monitoring-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Initialize monitoring data collection\nconst timestamp = new Date().toISOString();\nconst monitoringId = `monitoring_${Date.now()}`;\n\n// Define monitoring targets\nconst targets = [\n  {\n    name: 'web_app_health',\n    url: 'https://yellowbox-8e0e6.web.app',\n    type: 'http',\n    timeout: 10000\n  },\n  {\n    name: 'api_health',\n    url: 'https://yellowbox-8e0e6.web.app/api/health',\n    type: 'api',\n    timeout: 8000\n  },\n  {\n    name: 'webhook_endpoint',\n    url: 'https://n8n.srv924607.hstgr.cloud/webhook/yellowbox-sync',\n    type: 'webhook',\n    timeout: 5000\n  },\n  {\n    name: 'firebase_connectivity',\n    url: 'https://yellowbox-8e0e6.firebaseapp.com',\n    type: 'firebase',\n    timeout: 8000\n  }\n];\n\nreturn targets.map(target => ({\n  json: {\n    monitoringId,\n    timestamp,\n    target: target.name,\n    url: target.url,\n    type: target.type,\n    timeout: target.timeout,\n    status: 'pending'\n  }\n}));"
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Initialize Monitoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "timeout": "={{ $json.timeout }}",
          "response": {
            "response": {
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Health Check Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Process health check results\nconst input = $input.first();\nconst responseTime = input.json.$responseTime || 0;\nconst statusCode = input.json.$statusCode || 0;\nconst timestamp = new Date().toISOString();\n\n// Determine health status\nlet status = 'healthy';\nlet severity = 'info';\nlet alertRequired = false;\n\nif (statusCode >= 500) {\n  status = 'critical';\n  severity = 'critical';\n  alertRequired = true;\n} else if (statusCode >= 400) {\n  status = 'warning';\n  severity = 'warning';\n  alertRequired = true;\n} else if (responseTime > 10000) {\n  status = 'slow';\n  severity = 'warning';\n  alertRequired = responseTime > 15000;\n} else if (statusCode === 0) {\n  status = 'offline';\n  severity = 'critical';\n  alertRequired = true;\n}\n\n// Calculate availability score\nconst availabilityScore = statusCode >= 200 && statusCode < 400 ? 100 : 0;\n\n// Performance metrics\nconst performanceScore = Math.max(0, 100 - (responseTime / 100));\n\nreturn {\n  json: {\n    monitoringId: input.json.monitoringId,\n    target: input.json.target,\n    url: input.json.url,\n    type: input.json.type,\n    timestamp,\n    statusCode,\n    responseTime,\n    status,\n    severity,\n    alertRequired,\n    availabilityScore,\n    performanceScore,\n    metadata: {\n      responseSize: input.json.$responseSize || 0,\n      headers: input.json.$headers || {},\n      checked_at: timestamp\n    }\n  }\n};"
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Process Health Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"success\": true, \"message\": \"Monitoring completed\", \"timestamp\": $json.timestamp, \"status\": $json.status } }}"
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [1500, 600]
    }
  ],
  "connections": {
    "Monitoring Schedule": {
      "main": [
        [
          {
            "node": "Initialize Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Monitoring Webhook": {
      "main": [
        [
          {
            "node": "Initialize Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Monitoring": {
      "main": [
        [
          {
            "node": "Health Check Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Health Check Request": {
      "main": [
        [
          {
            "node": "Process Health Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Health Data": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "",
    "saveExecutionProgress": true,
    "saveDataSuccessExecution": "all",
    "saveDataErrorExecution": "all",
    "executionTimeout": -1,
    "timezone": "UTC"
  },
  "versionId": "monitoring-v1",
  "id": "monitoring-v1",
  "tags": []
}