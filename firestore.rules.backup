
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Import helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Safe version that handles missing user documents
    function getUserDataSafe() {
      return isAuthenticated() ? 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) ?
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data : 
          null : 
        null;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Check if database is in bootstrap state (no users exist)
    function isBootstrapMode() {
      // This is a simplified check - in practice, you might want to check multiple collections
      // For development, we allow bootstrap when authenticated but no user document exists
      return isAuthenticated() && getUserDataSafe() == null;
    }
    
    function hasRole(role) {
      let userData = getUserDataSafe();
      return isAuthenticated() && userData != null && userData.role == role;
    }
    
    // Enhanced role checks with bootstrap support
    function hasRoleOrBootstrap(role) {
      return hasRole(role) || isBootstrapMode();
    }
    
    function isAdminOrOperations() {
      return hasRole('Admin') || hasRole('Operations');
    }
    
    function isAdminOrOperationsOrBootstrap() {
      return hasRoleOrBootstrap('Admin') || hasRoleOrBootstrap('Operations');
    }
    
    function canManageExpenses() {
      return hasRole('Admin') || hasRole('Operations') || hasRole('Finance');
    }
    
    function canManageExpensesOrBootstrap() {
      return hasRoleOrBootstrap('Admin') || hasRoleOrBootstrap('Operations') || hasRoleOrBootstrap('Finance');
    }
    
    function canAssignCosts() {
      return hasRole('Admin') || hasRole('Finance');
    }
    
    function canAssignCostsOrBootstrap() {
      return hasRoleOrBootstrap('Admin') || hasRoleOrBootstrap('Finance');
    }
    
    function isValidLength(str, maxLen) {
      return str is string && str.size() <= maxLen;
    }
    
    function isValidAmount(amount) {
      return amount is number && amount > 0 && amount <= 50000;
    }
    
    function isValidCategory(category) {
      return category in ['Visa Processing', 'Medical Exam', 'Theory Test', 'Road Test', 
                         'Uniform', 'Equipment', 'Training', 'ID Card', 'Visa Fees', 
                         'RTA Tests', 'Medical', 'Residency ID', 'Other'];
    }
    
    function isValidReceiptUrl(url) {
      return url == null || (url is string && url.matches('^https://firebasestorage\\.googleapis\\.com/.*'));
    }
    
    // Validation functions
    function isValidDocumentData(data) {
      return data.keys().hasAll(['riderId', 'type', 'fileName', 'uploadDate', 'status']) &&
             isValidLength(data.fileName, 255) &&
             data.fileName.matches('.*\\.(pdf|jpg|jpeg|png)$') &&
             data.type in ['Visa', 'Driver License', 'Medical Certificate', 'Insurance', 'Residency ID', 'Theory Test', 'Road Test'] &&
             data.status in ['Valid', 'Expired', 'Required', 'Pending', 'Rejected'] &&
             (data.notes == null || isValidLength(data.notes, 1000));
    }
    
    function isValidRiderData(data) {
      return data.keys().hasAll(['fullName', 'nationality', 'phone', 'email', 'bikeType', 'applicationStage']) &&
             isValidLength(data.fullName, 100) &&
             isValidLength(data.nationality, 50) &&
             data.phone.matches('^(\\+971|0)?[0-9]{9}$') &&
             data.email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
             data.applicationStage in ['Applied', 'Docs Verified', 'Theory Test', 'Road Test', 'Medical', 'ID Issued', 'Active'] &&
             (data.notes == null || isValidLength(data.notes, 1000));
    }
    
    function isValidExpenseData(data) {
      return data.keys().hasAll(['riderId', 'category', 'amountAed', 'date', 'description']) &&
             isValidAmount(data.amountAed) &&
             isValidLength(data.description, 500) &&
             data.description.size() >= 5 &&
             isValidCategory(data.category) &&
             isValidReceiptUrl(data.get('receiptUrl', null)) &&
             data.date is string;
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read: if hasRole('Admin');
      allow create: if request.auth.uid == userId && 
        isValidLength(request.resource.data.name, 100) &&
        isValidLength(request.resource.data.email, 255) &&
        request.resource.data.role in ['Admin', 'Operations', 'Finance', 'Rider-Applicant'];
      allow create: if hasRoleOrBootstrap('Admin') && 
        isValidLength(request.resource.data.name, 100) &&
        isValidLength(request.resource.data.email, 255) &&
        request.resource.data.role in ['Admin', 'Operations', 'Finance', 'Rider-Applicant'];
      // Bootstrap mode: allow authenticated users to create any user document during initial setup
      allow create: if isBootstrapMode() && isAuthenticated() &&
        isValidLength(request.resource.data.name, 100) &&
        isValidLength(request.resource.data.email, 255) &&
        request.resource.data.role in ['Admin', 'Operations', 'Finance', 'Rider-Applicant'];
    }
    
    // Riders collection
    match /riders/{riderId} {
      allow read, write: if isAdminOrOperationsOrBootstrap() && 
        (request.resource == null || isValidRiderData(request.resource.data));
      allow read: if hasRole('Finance');
      allow read: if hasRole('Rider-Applicant') && 
        resource.data.email == getUserData().email;
      allow update: if hasRole('Rider-Applicant') && 
        resource.data.email == getUserData().email &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['phone', 'bikeType', 'notes']) &&
        isValidRiderData(request.resource.data);
    }
    
    // Expenses collection - Enhanced validation
    match /expenses/{expenseId} {
      allow read: if canManageExpensesOrBootstrap();
      allow write: if isAdminOrOperationsOrBootstrap() && 
        (request.resource == null || isValidExpenseData(request.resource.data));
      allow create: if canAssignCostsOrBootstrap() && 
        isValidExpenseData(request.resource.data) &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if canAssignCostsOrBootstrap() && 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'approvedBy', 'approvedAt', 'updatedAt']) ||
         (isValidExpenseData(request.resource.data) && request.resource.data.createdBy == request.auth.uid));
      allow read: if hasRole('Rider-Applicant') && 
        get(/databases/$(database)/documents/riders/$(resource.data.riderId)).data.email == getUserData().email;
    }
    
    // Documents collection
    match /rider_documents/{documentId} {
      allow read, write: if isAdminOrOperations() && 
        (request.resource == null || isValidDocumentData(request.resource.data));
      allow read: if hasRole('Finance');
      allow read: if hasRole('Rider-Applicant') && 
        resource.data.riderId in get(/databases/$(database)/documents/riders/$(resource.data.riderId)).data &&
        get(/databases/$(database)/documents/riders/$(resource.data.riderId)).data.email == getUserData().email;
      allow create: if hasRole('Rider-Applicant') && 
        request.resource.data.riderId in get(/databases/$(database)/documents/riders/$(request.resource.data.riderId)).data &&
        get(/databases/$(database)/documents/riders/$(request.resource.data.riderId)).data.email == getUserData().email &&
        isValidDocumentData(request.resource.data);
    }
    
    // System collections
    match /security_events/{eventId} {
      allow read: if hasRole('Admin');
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['type', 'timestamp', 'level']) &&
        request.resource.data.level in ['info', 'warning', 'error'] &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
    
    match /budgets/{budgetId} {
      allow read: if hasRole('Admin') || hasRole('Finance') || isBootstrapMode();
      allow write: if (hasRoleOrBootstrap('Admin')) &&
        request.resource.data.allocatedAed >= 0 &&
        request.resource.data.allocatedAed <= 1000000 &&
        request.resource.data.month.matches('^[0-9]{4}-[0-9]{2}$');
    }
    
    match /bikes/{bikeId} {
      allow read, write: if isAdminOrOperationsOrBootstrap() &&
        (request.resource == null || (
          isValidLength(request.resource.data.get('model', ''), 100) &&
          isValidLength(request.resource.data.get('registrationNumber', ''), 20) &&
          request.resource.data.get('status', '') in ['Available', 'Assigned', 'Maintenance']
        ));
      allow read: if isAuthenticated();
    }
    
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if canManageExpenses() && 
        request.resource.data.userId != null &&
        isValidLength(request.resource.data.get('message', ''), 500) &&
        request.resource.data.get('type', '') in ['info', 'warning', 'error', 'success'] &&
        request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']) &&
        request.resource.data.read == true;
      allow delete: if false;
    }
    
    match /user_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow read: if hasRole('Admin');
      allow delete: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || hasRole('Admin'));
    }
    
    match /document_audit_log/{auditId} {
      allow read: if hasRole('Admin');
      allow create: if canManageExpenses() && 
        request.resource.data.keys().hasAll(['documentId', 'action', 'timestamp']) &&
        request.resource.data.action in ['approved', 'rejected', 'uploaded', 'updated', 'deleted'] &&
        isValidLength(request.resource.data.get('notes', ''), 1000) &&
        request.resource.data.adminId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}
