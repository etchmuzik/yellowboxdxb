\nconst https = require('https');\n\nconst WEBHOOK_URL = 'https://n8n.srv924607.hstgr.cloud/webhook/yellowbox-sync';\n\n// Helper function to make HTTP requests\nfunction makeRequest(url, data) {\n  return new Promise((resolve, reject) => {\n    const postData = JSON.stringify(data);\n    \n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Content-Length': Buffer.byteLength(postData)\n      },\n      timeout: 10000\n    };\n\n    const req = https.request(url, options, (res) => {\n      let responseData = '';\n      \n      res.on('data', (chunk) => {\n        responseData += chunk;\n      });\n      \n      res.on('end', () => {\n        try {\n          const jsonData = JSON.parse(responseData);\n          resolve({\n            status: res.statusCode,\n            data: jsonData,\n            headers: res.headers\n          });\n        } catch (e) {\n          resolve({\n            status: res.statusCode,\n            data: responseData,\n            headers: res.headers\n          });\n        }\n      });\n    });\n\n    req.on('error', (error) => {\n      reject(error);\n    });\n\n    req.on('timeout', () => {\n      req.destroy();\n      reject(new Error('Request timeout'));\n    });\n\n    req.write(postData);\n    req.end();\n  });\n}\n\n// Comprehensive connectivity test simulating real web app scenarios\nasync function runComprehensiveConnectivityTests() {\n  console.log('üöÄ COMPREHENSIVE N8N CONNECTIVITY TEST');\n  console.log('=====================================');\n  console.log(`üéØ Target: ${WEBHOOK_URL}`);\n  console.log(`üìÖ Test Time: ${new Date().toISOString()}\\n`);\n\n  const testResults = [];\n\n  // Test 1: Basic connectivity\n  console.log('üîç TEST 1: Basic Connectivity');\n  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');\n  try {\n    const response = await makeRequest(WEBHOOK_URL, {\n      test: true,\n      timestamp: new Date().toISOString()\n    });\n    \n    testResults.push({\n      test: 'Basic Connectivity',\n      status: 'SUCCESS',\n      httpCode: response.status,\n      response: response.data\n    });\n    console.log(`‚úÖ SUCCESS - Status: ${response.status}`);\n    console.log(`   Response: ${JSON.stringify(response.data)}`);\n  } catch (error) {\n    testResults.push({\n      test: 'Basic Connectivity', \n      status: 'FAILED',\n      httpCode: 'ERROR',\n      error: error.message\n    });\n    console.log(`‚ùå FAILED - Error: ${error.message}`);\n  }\n\n  // Test 2: Web App Payload Structure (Current)\n  console.log('\\nüîç TEST 2: Web App Payload Structure (Current)');\n  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');\n  const webAppPayload = {\n    type: 'rider',\n    id: 'test-rider-001',\n    action: 'created',\n    data: {\n      id: 'test-rider-001',\n      firstName: 'Ahmed',\n      lastName: 'Al-Mansouri', \n      email: 'ahmed@test.com',\n      phone: '+971501234567',\n      status: 'applied',\n      createdAt: new Date().toISOString()\n    },\n    timestamp: new Date().toISOString()\n  };\n\n  try {\n    const response = await makeRequest(WEBHOOK_URL, webAppPayload);\n    testResults.push({\n      test: 'Web App Payload',\n      status: 'SUCCESS', \n      httpCode: response.status,\n      response: response.data\n    });\n    console.log(`‚úÖ SUCCESS - Status: ${response.status}`);\n    console.log(`   Web app payload processed correctly`);\n  } catch (error) {\n    testResults.push({\n      test: 'Web App Payload',\n      status: 'FAILED',\n      httpCode: 'ERROR', \n      error: error.message\n    });\n    console.log(`‚ùå FAILED - Error: ${error.message}`);\n    console.log(`   Current web app payload structure not compatible`);\n  }\n\n  // Test 3: N8N Expected Payload Structure\n  console.log('\\nüîç TEST 3: N8N Expected Payload Structure');\n  console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');\n  const n8nExpectedPayload = {\n    operation: 'rider_added',\n    data: {\n      id: 'test-rider-002',\n      name: 'Test Rider',\n      email: 'test2@test.com', \n      phone: '+971501234568',\n      status: 'applied',\n      createdAt: new Date().toISOString()\n    },\n    timestamp: new Date().toISOString()\n  };\n\n  try {\n    const response = await makeRequest(WEBHOOK_URL, n8nExpectedPayload);\n    testResults.push({\n      test: 'N8N Expected Payload',\n      status: 'SUCCESS',\n      httpCode: response.status, \n      response: response.data\n    });\n    console.log(`‚úÖ SUCCESS - Status: ${response.status}`);\n    console.log(`   N8N expected payload structure works`);\n  } catch (error) {\n    testResults.push({\n      test: 'N8N Expected Payload',\n      status: 'FAILED',\n      httpCode: 'ERROR',\n      error: error.message  \n    });\n    console.log(`‚ùå FAILED - Error: ${error.message}`);\n    console.log(`   Even expected payload structure fails - workflow not active`);\n  }\n\n  // Generate comprehensive report\n  console.log('\\n' + '='.repeat(60));\n  console.log('üìä COMPREHENSIVE TEST RESULTS SUMMARY');\n  console.log('='.repeat(60));\n  \n  const successCount = testResults.filter(r => r.status === 'SUCCESS').length;\n  const totalTests = testResults.length;\n  \n  console.log(`\\nüìà Overall Results: ${successCount}/${totalTests} tests passed`);\n  console.log(`üìÖ Test Completed: ${new Date().toISOString()}\\n`);\n\n  testResults.forEach((result, index) => {\n    const icon = result.status === 'SUCCESS' ? '‚úÖ' : '‚ùå';\n    console.log(`${icon} ${index + 1}. ${result.test}`);\n    console.log(`   Status: ${result.status} (HTTP ${result.httpCode})`);\n    \n    if (result.status === 'SUCCESS' && resul