rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return request.auth.token.role;
    }
    
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    function hasAnyRole(roles) {
      return isAuthenticated() && getUserRole() in roles;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function isValidPhoneNumber(phone) {
      return phone.matches('^\\+?[1-9]\\d{1,14}$');
    }
    
    // Rate limiting helper
    function rateLimit() {
      return request.time < resource.data.lastUpdate + duration.value(1, 's');
    }
    
    // User management
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) || 
        hasAnyRole(['Admin', 'Operations', 'Finance'])
      );
      
      allow create: if hasRole('Admin') && 
        request.resource.data.keys().hasAll(['email', 'name', 'role']) &&
        request.resource.data.role in ['Admin', 'Operations', 'Finance', 'Rider-Applicant'] &&
        isValidEmail(request.resource.data.email);
      
      allow update: if (
        (hasRole('Admin') && request.resource.data.role != 'Admin') ||
        (isOwner(userId) && !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'permissions']))
      );
      
      allow delete: if hasRole('Admin') && userId != request.auth.uid;
    }
    
    // Rider management
    match /riders/{riderId} {
      allow read: if hasAnyRole(['Admin', 'Operations', 'Finance']) ||
        (hasRole('Rider-Applicant') && resource.data.userId == request.auth.uid);
      
      allow create: if hasAnyRole(['Admin', 'Operations']) &&
        request.resource.data.keys().hasAll(['fullName', 'email', 'phoneNumber', 'applicationStage']) &&
        isValidEmail(request.resource.data.email) &&
        isValidPhoneNumber(request.resource.data.phoneNumber);
      
      allow update: if hasAnyRole(['Admin', 'Operations']) ||
        (hasRole('Rider-Applicant') && 
         resource.data.userId == request.auth.uid &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['applicationStage', 'status', 'bikeId']));
      
      allow delete: if hasRole('Admin');
    }
    
    // Document management
    match /rider_documents/{documentId} {
      allow read: if hasAnyRole(['Admin', 'Operations']) ||
        (hasRole('Rider-Applicant') && resource.data.riderId == request.auth.uid);
      
      allow create: if (hasAnyRole(['Admin', 'Operations']) ||
        (hasRole('Rider-Applicant') && request.resource.data.riderId == request.auth.uid)) &&
        request.resource.data.keys().hasAll(['riderId', 'type', 'status']) &&
        request.resource.data.type in ['emiratesId', 'passport', 'visa', 'drivingLicense', 'profilePhoto'];
      
      allow update: if hasAnyRole(['Admin', 'Operations']) ||
        (hasRole('Rider-Applicant') && 
         resource.data.riderId == request.auth.uid && 
         resource.data.status == 'Pending');
      
      allow delete: if hasRole('Admin');
    }
    
    // Expense management with strict validation
    match /expenses/{expenseId} {
      allow read: if hasAnyRole(['Admin', 'Finance']) ||
        (hasAnyRole(['Operations', 'Rider-Applicant']) && resource.data.riderId == request.auth.uid);
      
      allow create: if (hasAnyRole(['Admin', 'Finance', 'Operations']) ||
        (hasRole('Rider-Applicant') && request.resource.data.riderId == request.auth.uid)) &&
        request.resource.data.keys().hasAll(['riderId', 'type', 'amount', 'status', 'submittedAt']) &&
        request.resource.data.amount > 0 &&
        request.resource.data.amount <= 10000 &&
        request.resource.data.status == 'pending' &&
        request.resource.data.type in ['Bike Service', 'Fuel', 'Salik', 'RTA Fine', 'Insurance', 'Other'] &&
        !rateLimit();
      
      allow update: if (
        (hasAnyRole(['Admin', 'Finance']) && 
         request.resource.data.status in ['approved', 'rejected']) ||
        (resource.data.riderId == request.auth.uid && 
         resource.data.status == 'pending' &&
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'approvedBy', 'approvedAt']))
      );
      
      allow delete: if hasRole('Admin');
    }
    
    // Budget management - Finance only
    match /budgets/{budgetId} {
      allow read: if hasAnyRole(['Admin', 'Finance']);
      allow write: if hasRole('Finance') &&
        request.resource.data.keys().hasAll(['month', 'year', 'totalBudget', 'allocatedBudget']) &&
        request.resource.data.totalBudget >= 0 &&
        request.resource.data.allocatedBudget >= 0 &&
        request.resource.data.allocatedBudget <= request.resource.data.totalBudget;
      allow delete: if hasRole('Admin');
    }
    
    // Bike management
    match /bikes/{bikeId} {
      allow read: if isAuthenticated();
      
      allow create: if hasAnyRole(['Admin', 'Operations']) &&
        request.resource.data.keys().hasAll(['registrationNumber', 'model', 'status']) &&
        request.resource.data.status in ['Available', 'Assigned', 'Maintenance'];
      
      allow update: if hasAnyRole(['Admin', 'Operations']);
      allow delete: if hasRole('Admin');
    }
    
    // Location tracking - write-only for riders, read for operations
    match /locations/{locationId} {
      allow read: if hasAnyRole(['Admin', 'Operations']);
      allow create: if hasRole('Rider-Applicant') &&
        request.resource.data.riderId == request.auth.uid &&
        request.resource.data.keys().hasAll(['riderId', 'latitude', 'longitude', 'timestamp']);
      allow update: if false; // Locations are immutable
      allow delete: if hasRole('Admin');
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isOwner(resource.data.userId) || hasRole('Admin');
      allow create: if hasAnyRole(['Admin', 'Operations', 'Finance']);
      allow update: if isOwner(resource.data.userId) && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow delete: if isOwner(resource.data.userId) || hasRole('Admin');
    }
    
    // Activity logs - read-only except for system
    match /activities/{activityId} {
      allow read: if hasAnyRole(['Admin', 'Operations']);
      allow write: if false; // Only through Cloud Functions
    }
    
    // Security events logging
    match /security_events/{eventId} {
      allow read: if hasRole('Admin');
      allow write: if false; // Only through Cloud Functions
    }
    
    // Session management
    match /user_sessions/{sessionId} {
      allow read: if hasRole('Admin') || resource.data.userId == request.auth.uid;
      allow write: if false; // Managed by authentication system
    }
    
    // Visa management
    match /visa-management/{visaId} {
      allow read: if hasAnyRole(['Admin', 'Operations', 'Finance']);
      allow create, update: if hasAnyRole(['Admin', 'Operations']) &&
        request.resource.data.keys().hasAll(['riderId', 'visaStatus', 'expiryDate']);
      allow delete: if hasRole('Admin');
    }
    
    // System configuration - Admin only
    match /system_config/{configId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('Admin');
    }
    
    // Audit trail - immutable
    match /audit_trail/{auditId} {
      allow read: if hasRole('Admin');
      allow write: if false; // Only through Cloud Functions
    }
  }
}